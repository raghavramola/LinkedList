//Iterative- order n - 1traversal of list
-----------------------------------------------


Node* reverse(Node* root)
{
if(root==NULL||root->next==NULL)
return root;

Node* prev,*curr,*forward;
prev=root;
curr=root->next;
forward =curr->next;
prev->next=NULL;


while(curr!=NULL)
{
curr->next=prev;
prev=curr;
curr=forward;
if(forward!=NULL)
forward=forward->next;
}
return prev;

}


Naive solution - 2 traversals , n space
-------------------------------------------

Node* reverse(Node* root)
{
if(root==NULL||root->next==NULL)
return root;

vector<int>arr;
for(Node* curr=root;curr!=NULL;curr=curr->next)
{
arr.push_back(curr->key);
}
for(curr=root;curr!=NULL;curr=curr->next)
{
curr->key = arr.back();
arr.pop_back();
}
return root;
}




//Recursive Solution
-------------------------------
Node* reverse(Node* head)
{
if(head==NULL||head->next==NULL)
return head;

Node* rest_head = reverse(head->next);
Node* tail = head->next;
tail->next=head;
head->next=NULL;
return rest_head;
}

//Second Method
--------------------

Node* reverse(Node* curr,Node* prev)      //initially , curr is head and prev is NULL
{
if(curr==NULL)
{
return prev;
}

Node* next = curr->next;
curr->next = prev;
return reverse(next,curr);